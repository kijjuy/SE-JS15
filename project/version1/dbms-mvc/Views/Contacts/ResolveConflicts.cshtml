@model IEnumerable<MergeConflictViewModel>

    @{
    string title = "Resolve Conflicts";
    ViewData["Title"] = title;
    }

    <h1>@title</h1>

    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Organization)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.StreetAddress1)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.City)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Province)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.PostalCode)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Subscribed)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Email)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Phone)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Fax)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Website)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.BedsCount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Address2)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().NewContact.Extension)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    Contact currently in records:
                </td>
                <td id="dupeFirstName">
                </td>
                <td id="dupeLastName">
                </td>
                <td id="dupeOrganization">
                </td>
                <td id="dupeTitle">
                </td>
                <td id="dupeStreetAddress1">
                </td>
                <td id="dupeCity">
                </td>
                <td id="dupeProvince">
                </td>
                <td id="dupePostalCode">
                </td>
                <td id="dupeSubscribed">
                </td>
                <td id="dupeEmail">
                </td>
                <td id="dupePhone">
                </td>
                <td id="dupeFax">
                </td>
                <td id="dupeWebsite">
                </td>
                <td id="dupeBedsCount">
                </td>
                <td id="dupeAddress2">
                </td>
                <td id="dupeExtension">
                </td>
            </tr>
        </tbody>
        <tbody>
            <tr>
                <td>
                    New contact:
                </td>
                <td id="newFirstName">
                </td>
                <td id="newLastName">
                </td>
                <td id="newOrganization">
                </td>
                <td id="newTitle">
                </td>
                <td id="newStreetAddress1">
                </td>
                <td id="newCity">
                </td>
                <td id="newProvince">
                </td>
                <td id="newPostalCode">
                </td>
                <td id="newSubscribed">
                </td>
                <td id="newEmail">
                </td>
                <td id="newPhone">
                </td>
                <td id="newFax">
                </td>
                <td id="newWebsite">
                </td>
                <td id="newBedsCount">
                </td>
                <td id="newAddress2">
                </td>
                <td id="newExtension">
                </td>
            </tr>
        </tbody>
    </table>

    <div id="replace" class="btn btn-warning resolveButton">Replace</div>
    <div id="skip" class="btn btn-primary resolveButton">Skip</div>
    <div id="skipRemaining" class="btn btn-primary resolveButton">Skip Remaining</div>

    @section scripts {
    <script>
        const conflictingContactsList = @Html.Raw(Json.Serialize(Model));
        let curContactIndex = -1;
        const replaceViewModelList = [];

        nextContact();
        
        function displayCurrentConflict() {
            renderDupeContact();
            renderNewContact();
        }

        function nextContact() {
            curContactIndex++;
            if (curContactIndex >= conflictingContactsList.length) {
                sendData();
            }
            displayCurrentConflict();
        }

        function renderDupeContact() {
            document.getElementById("dupeFirstName").innerText = conflictingContactsList[curContactIndex].dupeContact.firstName;
            document.getElementById("dupeLastName").innerText = conflictingContactsList[curContactIndex].dupeContact.lastName;
            document.getElementById("dupeOrganization").innerText = conflictingContactsList[curContactIndex].dupeContact.organization;
            document.getElementById("dupeTitle").innerText = conflictingContactsList[curContactIndex].dupeContact.title;
            document.getElementById("dupeStreetAddress1").innerText = conflictingContactsList[curContactIndex].dupeContact.streetAddress1;
            document.getElementById("dupeCity").innerText = conflictingContactsList[curContactIndex].dupeContact.city;
            document.getElementById("dupeProvince").innerText = conflictingContactsList[curContactIndex].dupeContact.province;
            document.getElementById("dupePostalCode").innerText = conflictingContactsList[curContactIndex].dupeContact.postalCode;
            document.getElementById("dupeSubscribed").innerText = conflictingContactsList[curContactIndex].dupeContact.subscribed;
            document.getElementById("dupeEmail").innerText = conflictingContactsList[curContactIndex].dupeContact.email;
            document.getElementById("dupePhone").innerText = conflictingContactsList[curContactIndex].dupeContact.phone;
            document.getElementById("dupeFax").innerText = conflictingContactsList[curContactIndex].dupeContact.fax;
            document.getElementById("dupeWebsite").innerText = conflictingContactsList[curContactIndex].dupeContact.website;
            document.getElementById("dupeBedsCount").innerText = conflictingContactsList[curContactIndex].dupeContact.bedsCount;
            document.getElementById("dupeAddress2").innerText = conflictingContactsList[curContactIndex].dupeContact.address2;
            document.getElementById("dupeExtension").innerText = conflictingContactsList[curContactIndex].dupeContact.extension;
        }

        function renderNewContact() {
            document.getElementById("newFirstName").innerText = conflictingContactsList[curContactIndex].newContact.firstName;
            document.getElementById("newLastName").innerText = conflictingContactsList[curContactIndex].newContact.lastName;
            document.getElementById("newOrganization").innerText = conflictingContactsList[curContactIndex].newContact.organization;
            document.getElementById("newTitle").innerText = conflictingContactsList[curContactIndex].newContact.title;
            document.getElementById("newStreetAddress1").innerText = conflictingContactsList[curContactIndex].newContact.streetAddress1;
            document.getElementById("newCity").innerText = conflictingContactsList[curContactIndex].newContact.city;
            document.getElementById("newProvince").innerText = conflictingContactsList[curContactIndex].newContact.province;
            document.getElementById("newPostalCode").innerText = conflictingContactsList[curContactIndex].newContact.postalCode;
            document.getElementById("newSubscribed").innerText = conflictingContactsList[curContactIndex].newContact.subscribed;
            document.getElementById("newEmail").innerText = conflictingContactsList[curContactIndex].newContact.email;
            document.getElementById("newPhone").innerText = conflictingContactsList[curContactIndex].newContact.phone;
            document.getElementById("newFax").innerText = conflictingContactsList[curContactIndex].newContact.fax;
            document.getElementById("newWebsite").innerText = conflictingContactsList[curContactIndex].newContact.website;
            document.getElementById("newBedsCount").innerText = conflictingContactsList[curContactIndex].newContact.bedsCount;
            document.getElementById("newAddress2").innerText = conflictingContactsList[curContactIndex].newContact.address2;
            document.getElementById("newExtension").innerText = conflictingContactsList[curContactIndex].newContact.extension;
        }

        $(document).ready(function () {
            $(".resolveButton").click(function (event) {
                const id = event.target.id;
                if (id === "replace") {
                    //TODO: create replace view model containing id of item to replace and new contact info
                    replace();
                }
                if (id === "skip") {
                    nextContact();
                }
                if (id === "skipRemaining") {
                    curContactIndex = conflictingContactsList.length - 1;
                    nextContact();
                }

            });

        });

        function sendData() {
            const url = "/Contacts/MergeResolver";
            const result = fetch(url, {
                method: "POST",
                headers: {
                    "Content-type": "application/json",
                },
                body: JSON.stringify(replaceViewModelList),
            })
                .then(r => {
                    if(r.ok) {
                        window.location.href = "/Contacts/Index";
                    }});
        }

        function replace() {
            const replaceViewModel = {
                ReplaceContactId: conflictingContactsList[curContactIndex].dupeContact.contactId,
                NewContact: conflictingContactsList[curContactIndex].newContact,
            };
            replaceViewModelList.push(replaceViewModel);
            nextContact();
        }
    </script>
    }
